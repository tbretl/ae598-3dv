// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace bretl_projection_nopose {

/**
 * Symbolic function that computes the difference between a projected point
 * and an image point. This error is "whitened" so that taking its norm will
 * be equivalent to applying a robust loss function (Geman-McClure).
 *     jacobian: (2x3) jacobian of res wrt arg p_inW (3)
 *     hessian: (3x3) Gauss-Newton hessian for arg p_inW (3)
 *     rhs: (3x1) Gauss-Newton rhs for arg p_inW (3)
 */
template <typename Scalar>
void BretlProjectionNoposeFactor(const sym::Pose3<Scalar>& T_inC_ofW,
                                 const Eigen::Matrix<Scalar, 3, 1>& p_inW,
                                 const Eigen::Matrix<Scalar, 2, 1>& q, const Scalar fx,
                                 const Scalar fy, const Scalar cx, const Scalar cy,
                                 const Scalar epsilon,
                                 Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
                                 Eigen::Matrix<Scalar, 2, 3>* const jacobian = nullptr,
                                 Eigen::Matrix<Scalar, 3, 3>* const hessian = nullptr,
                                 Eigen::Matrix<Scalar, 3, 1>* const rhs = nullptr) {
  // Total ops: 187

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _T_inC_ofW = T_inC_ofW.Data();

  // Intermediate terms (72)
  const Scalar _tmp0 = 2 * _T_inC_ofW[1];
  const Scalar _tmp1 = _T_inC_ofW[0] * _tmp0;
  const Scalar _tmp2 = 2 * _T_inC_ofW[2] * _T_inC_ofW[3];
  const Scalar _tmp3 = _tmp1 - _tmp2;
  const Scalar _tmp4 = 2 * _T_inC_ofW[0];
  const Scalar _tmp5 = _T_inC_ofW[2] * _tmp4;
  const Scalar _tmp6 = _T_inC_ofW[3] * _tmp0;
  const Scalar _tmp7 = _tmp5 + _tmp6;
  const Scalar _tmp8 = -2 * std::pow(_T_inC_ofW[2], Scalar(2));
  const Scalar _tmp9 = 1 - 2 * std::pow(_T_inC_ofW[1], Scalar(2));
  const Scalar _tmp10 = _tmp8 + _tmp9;
  const Scalar _tmp11 =
      _T_inC_ofW[4] + _tmp10 * p_inW(0, 0) + _tmp3 * p_inW(1, 0) + _tmp7 * p_inW(2, 0);
  const Scalar _tmp12 = _tmp5 - _tmp6;
  const Scalar _tmp13 = _T_inC_ofW[3] * _tmp4;
  const Scalar _tmp14 = _T_inC_ofW[2] * _tmp0;
  const Scalar _tmp15 = _tmp13 + _tmp14;
  const Scalar _tmp16 = -2 * std::pow(_T_inC_ofW[0], Scalar(2));
  const Scalar _tmp17 = _tmp16 + _tmp9;
  const Scalar _tmp18 =
      _T_inC_ofW[6] + _tmp12 * p_inW(0, 0) + _tmp15 * p_inW(1, 0) + _tmp17 * p_inW(2, 0);
  const Scalar _tmp19 = std::max<Scalar>(_tmp18, epsilon);
  const Scalar _tmp20 = Scalar(1.0) / (_tmp19);
  const Scalar _tmp21 = _tmp20 * fx;
  const Scalar _tmp22 = _tmp11 * _tmp21 + cx - q(0, 0);
  const Scalar _tmp23 = _tmp1 + _tmp2;
  const Scalar _tmp24 = -_tmp13 + _tmp14;
  const Scalar _tmp25 = _tmp16 + _tmp8 + 1;
  const Scalar _tmp26 =
      _T_inC_ofW[5] + _tmp23 * p_inW(0, 0) + _tmp24 * p_inW(2, 0) + _tmp25 * p_inW(1, 0);
  const Scalar _tmp27 = _tmp20 * fy;
  const Scalar _tmp28 = _tmp26 * _tmp27 + cy - q(1, 0);
  const Scalar _tmp29 = std::pow(_tmp22, Scalar(2)) + std::pow(_tmp28, Scalar(2)) + epsilon;
  const Scalar _tmp30 = epsilon + 4;
  const Scalar _tmp31 = _tmp29 / _tmp30 + 1;
  const Scalar _tmp32 = -epsilon;
  const Scalar _tmp33 = _tmp32 - 2;
  const Scalar _tmp34 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp35 =
      std::sqrt(Scalar(2)) * std::sqrt(Scalar(_tmp30 * (std::pow(_tmp31, _tmp34) - 1) / _tmp33));
  const Scalar _tmp36 = std::pow(_tmp29, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp37 = _tmp35 * _tmp36;
  const Scalar _tmp38 = _tmp22 * _tmp37;
  const Scalar _tmp39 = _tmp28 * _tmp37;
  const Scalar _tmp40 = _tmp26 * fy;
  const Scalar _tmp41 = (Scalar(1) / Scalar(2)) *
                        ((((_tmp18 + _tmp32) > 0) - ((_tmp18 + _tmp32) < 0)) + 1) /
                        std::pow(_tmp19, Scalar(2));
  const Scalar _tmp42 = _tmp12 * _tmp41;
  const Scalar _tmp43 = _tmp23 * _tmp27 - _tmp40 * _tmp42;
  const Scalar _tmp44 = 2 * _tmp28;
  const Scalar _tmp45 = _tmp11 * fx;
  const Scalar _tmp46 = _tmp10 * _tmp21 - _tmp42 * _tmp45;
  const Scalar _tmp47 = 2 * _tmp22;
  const Scalar _tmp48 = _tmp43 * _tmp44 + _tmp46 * _tmp47;
  const Scalar _tmp49 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp50 = _tmp48 * _tmp49;
  const Scalar _tmp51 = std::pow(_tmp31, Scalar(_tmp34 - 1)) * _tmp36 / _tmp35;
  const Scalar _tmp52 = _tmp35 / (_tmp29 * std::sqrt(_tmp29));
  const Scalar _tmp53 = _tmp37 * _tmp46 + _tmp50 * _tmp51 - _tmp50 * _tmp52;
  const Scalar _tmp54 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp55 = _tmp51 * _tmp54;
  const Scalar _tmp56 = _tmp52 * _tmp54;
  const Scalar _tmp57 = _tmp37 * _tmp43 + _tmp48 * _tmp55 - _tmp48 * _tmp56;
  const Scalar _tmp58 = _tmp15 * _tmp41;
  const Scalar _tmp59 = _tmp25 * _tmp27 - _tmp40 * _tmp58;
  const Scalar _tmp60 = _tmp21 * _tmp3 - _tmp45 * _tmp58;
  const Scalar _tmp61 = _tmp44 * _tmp59 + _tmp47 * _tmp60;
  const Scalar _tmp62 = _tmp49 * _tmp52;
  const Scalar _tmp63 = _tmp49 * _tmp51;
  const Scalar _tmp64 = _tmp37 * _tmp60 - _tmp61 * _tmp62 + _tmp61 * _tmp63;
  const Scalar _tmp65 = _tmp37 * _tmp59 + _tmp55 * _tmp61 - _tmp56 * _tmp61;
  const Scalar _tmp66 = _tmp17 * _tmp41;
  const Scalar _tmp67 = _tmp21 * _tmp7 - _tmp45 * _tmp66;
  const Scalar _tmp68 = _tmp24 * _tmp27 - _tmp40 * _tmp66;
  const Scalar _tmp69 = _tmp44 * _tmp68 + _tmp47 * _tmp67;
  const Scalar _tmp70 = _tmp37 * _tmp67 - _tmp62 * _tmp69 + _tmp63 * _tmp69;
  const Scalar _tmp71 = _tmp37 * _tmp68 + _tmp55 * _tmp69 - _tmp56 * _tmp69;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp38;
    _res(1, 0) = _tmp39;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 3>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp53;
    _jacobian(1, 0) = _tmp57;
    _jacobian(0, 1) = _tmp64;
    _jacobian(1, 1) = _tmp65;
    _jacobian(0, 2) = _tmp70;
    _jacobian(1, 2) = _tmp71;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp53, Scalar(2)) + std::pow(_tmp57, Scalar(2));
    _hessian(1, 0) = _tmp53 * _tmp64 + _tmp57 * _tmp65;
    _hessian(2, 0) = _tmp53 * _tmp70 + _tmp57 * _tmp71;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp64, Scalar(2)) + std::pow(_tmp65, Scalar(2));
    _hessian(2, 1) = _tmp64 * _tmp70 + _tmp65 * _tmp71;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp70, Scalar(2)) + std::pow(_tmp71, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp38 * _tmp53 + _tmp39 * _tmp57;
    _rhs(1, 0) = _tmp38 * _tmp64 + _tmp39 * _tmp65;
    _rhs(2, 0) = _tmp38 * _tmp70 + _tmp39 * _tmp71;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace bretl_projection_nopose
