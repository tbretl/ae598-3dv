// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace bretl_scale {

/**
 * Symbolic function that computes the relative distance between two frames.
 *     jacobian: (1x6) jacobian of res wrt arg T_inC_ofW (6)
 *     hessian: (6x6) Gauss-Newton hessian for arg T_inC_ofW (6)
 *     rhs: (6x1) Gauss-Newton rhs for arg T_inC_ofW (6)
 */
template <typename Scalar>
void BretlScaleFactor(const sym::Pose3<Scalar>& T_inC_ofW, const Scalar epsilon,
                      Eigen::Matrix<Scalar, 1, 1>* const res = nullptr,
                      Eigen::Matrix<Scalar, 1, 6>* const jacobian = nullptr,
                      Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                      Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 24

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _T_inC_ofW = T_inC_ofW.Data();

  // Intermediate terms (12)
  const Scalar _tmp0 = std::pow(_T_inC_ofW[6], Scalar(2));
  const Scalar _tmp1 = std::pow(_T_inC_ofW[5], Scalar(2));
  const Scalar _tmp2 = std::pow(_T_inC_ofW[4], Scalar(2));
  const Scalar _tmp3 = _tmp0 + _tmp1 + _tmp2 + epsilon;
  const Scalar _tmp4 = std::sqrt(_tmp3);
  const Scalar _tmp5 = _tmp4 - 1;
  const Scalar _tmp6 = Scalar(1.0) / (_tmp4);
  const Scalar _tmp7 = _T_inC_ofW[4] * _tmp6;
  const Scalar _tmp8 = _T_inC_ofW[5] * _tmp6;
  const Scalar _tmp9 = _T_inC_ofW[6] * _tmp6;
  const Scalar _tmp10 = Scalar(1.0) / (_tmp3);
  const Scalar _tmp11 = _T_inC_ofW[6] * _tmp10;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _res = (*res);

    _res(0, 0) = _tmp5;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 1, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = 0;
    _jacobian(0, 1) = 0;
    _jacobian(0, 2) = 0;
    _jacobian(0, 3) = _tmp7;
    _jacobian(0, 4) = _tmp8;
    _jacobian(0, 5) = _tmp9;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(3, 3) = _tmp10 * _tmp2;
    _hessian(4, 3) = _T_inC_ofW[4] * _T_inC_ofW[5] * _tmp10;
    _hessian(5, 3) = _T_inC_ofW[4] * _tmp11;
    _hessian(4, 4) = _tmp1 * _tmp10;
    _hessian(5, 4) = _T_inC_ofW[5] * _tmp11;
    _hessian(5, 5) = _tmp0 * _tmp10;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = 0;
    _rhs(1, 0) = 0;
    _rhs(2, 0) = 0;
    _rhs(3, 0) = _tmp5 * _tmp7;
    _rhs(4, 0) = _tmp5 * _tmp8;
    _rhs(5, 0) = _tmp5 * _tmp9;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace bretl_scale
