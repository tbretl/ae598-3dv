// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace bretl_projection {

/**
 * Symbolic function that computes the difference between a projected point
 * and an image point. This error is "whitened" so that taking its norm will
 * be equivalent to applying a robust loss function (Geman-McClure).
 *     jacobian: (2x9) jacobian of res wrt args T_inC_ofW (6), p_inW (3)
 *     hessian: (9x9) Gauss-Newton hessian for args T_inC_ofW (6), p_inW (3)
 *     rhs: (9x1) Gauss-Newton rhs for args T_inC_ofW (6), p_inW (3)
 */
template <typename Scalar>
void BretlProjectionFactor(const sym::Pose3<Scalar>& T_inC_ofW,
                           const Eigen::Matrix<Scalar, 3, 1>& p_inW,
                           const Eigen::Matrix<Scalar, 2, 1>& q, const Scalar fx, const Scalar fy,
                           const Scalar cx, const Scalar cy, const Scalar epsilon,
                           Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
                           Eigen::Matrix<Scalar, 2, 9>* const jacobian = nullptr,
                           Eigen::Matrix<Scalar, 9, 9>* const hessian = nullptr,
                           Eigen::Matrix<Scalar, 9, 1>* const rhs = nullptr) {
  // Total ops: 475

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _T_inC_ofW = T_inC_ofW.Data();

  // Intermediate terms (122)
  const Scalar _tmp0 = 2 * _T_inC_ofW[1];
  const Scalar _tmp1 = _T_inC_ofW[0] * _tmp0;
  const Scalar _tmp2 = 2 * _T_inC_ofW[2] * _T_inC_ofW[3];
  const Scalar _tmp3 = -_tmp2;
  const Scalar _tmp4 = _tmp1 + _tmp3;
  const Scalar _tmp5 = 2 * _T_inC_ofW[0];
  const Scalar _tmp6 = _T_inC_ofW[2] * _tmp5;
  const Scalar _tmp7 = _T_inC_ofW[3] * _tmp0;
  const Scalar _tmp8 = _tmp6 + _tmp7;
  const Scalar _tmp9 = std::pow(_T_inC_ofW[2], Scalar(2));
  const Scalar _tmp10 = -2 * _tmp9;
  const Scalar _tmp11 = std::pow(_T_inC_ofW[1], Scalar(2));
  const Scalar _tmp12 = 1 - 2 * _tmp11;
  const Scalar _tmp13 = _tmp10 + _tmp12;
  const Scalar _tmp14 =
      _T_inC_ofW[4] + _tmp13 * p_inW(0, 0) + _tmp4 * p_inW(1, 0) + _tmp8 * p_inW(2, 0);
  const Scalar _tmp15 = -_tmp7;
  const Scalar _tmp16 = _tmp15 + _tmp6;
  const Scalar _tmp17 = _T_inC_ofW[3] * _tmp5;
  const Scalar _tmp18 = _T_inC_ofW[2] * _tmp0;
  const Scalar _tmp19 = _tmp17 + _tmp18;
  const Scalar _tmp20 = std::pow(_T_inC_ofW[0], Scalar(2));
  const Scalar _tmp21 = -2 * _tmp20;
  const Scalar _tmp22 = _tmp12 + _tmp21;
  const Scalar _tmp23 =
      _T_inC_ofW[6] + _tmp16 * p_inW(0, 0) + _tmp19 * p_inW(1, 0) + _tmp22 * p_inW(2, 0);
  const Scalar _tmp24 = std::max<Scalar>(_tmp23, epsilon);
  const Scalar _tmp25 = Scalar(1.0) / (_tmp24);
  const Scalar _tmp26 = _tmp25 * fx;
  const Scalar _tmp27 = _tmp14 * _tmp26 + cx - q(0, 0);
  const Scalar _tmp28 = std::pow(_tmp27, Scalar(2));
  const Scalar _tmp29 = _tmp1 + _tmp2;
  const Scalar _tmp30 = -_tmp17;
  const Scalar _tmp31 = _tmp18 + _tmp30;
  const Scalar _tmp32 = _tmp10 + _tmp21 + 1;
  const Scalar _tmp33 =
      _T_inC_ofW[5] + _tmp29 * p_inW(0, 0) + _tmp31 * p_inW(2, 0) + _tmp32 * p_inW(1, 0);
  const Scalar _tmp34 = _tmp25 * fy;
  const Scalar _tmp35 = _tmp33 * _tmp34 + cy - q(1, 0);
  const Scalar _tmp36 = std::pow(_tmp35, Scalar(2));
  const Scalar _tmp37 = _tmp28 + _tmp36 + epsilon;
  const Scalar _tmp38 = epsilon + 4;
  const Scalar _tmp39 = _tmp37 / _tmp38 + 1;
  const Scalar _tmp40 = -epsilon;
  const Scalar _tmp41 = _tmp40 - 2;
  const Scalar _tmp42 = (Scalar(1) / Scalar(2)) * _tmp41;
  const Scalar _tmp43 =
      std::sqrt(Scalar(2)) * std::sqrt(Scalar(_tmp38 * (std::pow(_tmp39, _tmp42) - 1) / _tmp41));
  const Scalar _tmp44 = std::pow(_tmp37, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp45 = _tmp43 * _tmp44;
  const Scalar _tmp46 = _tmp27 * _tmp45;
  const Scalar _tmp47 = _tmp35 * _tmp45;
  const Scalar _tmp48 = -_tmp18;
  const Scalar _tmp49 = -_tmp11;
  const Scalar _tmp50 = std::pow(_T_inC_ofW[3], Scalar(2));
  const Scalar _tmp51 = -_tmp20;
  const Scalar _tmp52 =
      p_inW(1, 0) * (_tmp49 + _tmp50 + _tmp51 + _tmp9) + p_inW(2, 0) * (_tmp30 + _tmp48);
  const Scalar _tmp53 =
      ((((_tmp23 + _tmp40) > 0) - ((_tmp23 + _tmp40) < 0)) + 1) / std::pow(_tmp24, Scalar(2));
  const Scalar _tmp54 = _tmp33 * _tmp53 * fy;
  const Scalar _tmp55 = (Scalar(1) / Scalar(2)) * _tmp54;
  const Scalar _tmp56 = -_tmp50;
  const Scalar _tmp57 = _tmp56 + _tmp9;
  const Scalar _tmp58 = _tmp20 + _tmp49;
  const Scalar _tmp59 =
      _tmp34 * (_tmp31 * p_inW(1, 0) + p_inW(2, 0) * (_tmp57 + _tmp58)) - _tmp52 * _tmp55;
  const Scalar _tmp60 = 2 * _tmp35;
  const Scalar _tmp61 = _tmp14 * _tmp53 * fx;
  const Scalar _tmp62 = (Scalar(1) / Scalar(2)) * _tmp61;
  const Scalar _tmp63 = -_tmp1;
  const Scalar _tmp64 =
      _tmp26 * (_tmp8 * p_inW(1, 0) + p_inW(2, 0) * (_tmp2 + _tmp63)) - _tmp52 * _tmp62;
  const Scalar _tmp65 = 2 * _tmp27;
  const Scalar _tmp66 = _tmp59 * _tmp60 + _tmp64 * _tmp65;
  const Scalar _tmp67 = std::pow(_tmp39, Scalar(_tmp42 - 1)) * _tmp44 / _tmp43;
  const Scalar _tmp68 = _tmp27 * _tmp67;
  const Scalar _tmp69 = (Scalar(1) / Scalar(2)) * _tmp68;
  const Scalar _tmp70 = _tmp43 / (_tmp37 * std::sqrt(_tmp37));
  const Scalar _tmp71 = _tmp27 * _tmp70;
  const Scalar _tmp72 = (Scalar(1) / Scalar(2)) * _tmp71;
  const Scalar _tmp73 = _tmp45 * _tmp64 + _tmp66 * _tmp69 - _tmp66 * _tmp72;
  const Scalar _tmp74 = _tmp35 * _tmp67;
  const Scalar _tmp75 = (Scalar(1) / Scalar(2)) * _tmp74;
  const Scalar _tmp76 = _tmp35 * _tmp70;
  const Scalar _tmp77 = (Scalar(1) / Scalar(2)) * _tmp76;
  const Scalar _tmp78 = _tmp45 * _tmp59 + _tmp66 * _tmp75 - _tmp66 * _tmp77;
  const Scalar _tmp79 = -_tmp9;
  const Scalar _tmp80 = _tmp16 * p_inW(2, 0) + p_inW(0, 0) * (_tmp11 + _tmp20 + _tmp56 + _tmp79);
  const Scalar _tmp81 = -_tmp6;
  const Scalar _tmp82 = _tmp50 + _tmp79;
  const Scalar _tmp83 =
      _tmp26 * (p_inW(0, 0) * (_tmp15 + _tmp81) + p_inW(2, 0) * (_tmp58 + _tmp82)) -
      _tmp62 * _tmp80;
  const Scalar _tmp84 =
      _tmp34 * (_tmp29 * p_inW(2, 0) + p_inW(0, 0) * (_tmp17 + _tmp48)) - _tmp55 * _tmp80;
  const Scalar _tmp85 = _tmp60 * _tmp84 + _tmp65 * _tmp83;
  const Scalar _tmp86 = _tmp45 * _tmp83 + _tmp69 * _tmp85 - _tmp72 * _tmp85;
  const Scalar _tmp87 = _tmp45 * _tmp84 + _tmp75 * _tmp85 - _tmp77 * _tmp85;
  const Scalar _tmp88 = _tmp11 + _tmp51;
  const Scalar _tmp89 = _tmp19 * p_inW(0, 0) + p_inW(1, 0) * (_tmp7 + _tmp81);
  const Scalar _tmp90 =
      _tmp26 * (_tmp4 * p_inW(0, 0) + p_inW(1, 0) * (_tmp57 + _tmp88)) - _tmp62 * _tmp89;
  const Scalar _tmp91 =
      _tmp34 * (p_inW(0, 0) * (_tmp82 + _tmp88) + p_inW(1, 0) * (_tmp3 + _tmp63)) - _tmp55 * _tmp89;
  const Scalar _tmp92 = _tmp60 * _tmp91 + _tmp65 * _tmp90;
  const Scalar _tmp93 = _tmp45 * _tmp90 + _tmp69 * _tmp92 - _tmp72 * _tmp92;
  const Scalar _tmp94 = _tmp45 * _tmp91 + _tmp75 * _tmp92 - _tmp77 * _tmp92;
  const Scalar _tmp95 = _tmp26 * _tmp28;
  const Scalar _tmp96 = _tmp26 * _tmp45 + _tmp67 * _tmp95 - _tmp70 * _tmp95;
  const Scalar _tmp97 = _tmp27 * _tmp76;
  const Scalar _tmp98 = _tmp35 * _tmp68;
  const Scalar _tmp99 = -_tmp26 * _tmp97 + _tmp26 * _tmp98;
  const Scalar _tmp100 = -_tmp34 * _tmp97 + _tmp34 * _tmp98;
  const Scalar _tmp101 = _tmp34 * _tmp36;
  const Scalar _tmp102 = _tmp101 * _tmp67 - _tmp101 * _tmp70 + _tmp34 * _tmp45;
  const Scalar _tmp103 =
      -Scalar(1) / Scalar(2) * _tmp27 * _tmp61 - Scalar(1) / Scalar(2) * _tmp35 * _tmp54;
  const Scalar _tmp104 = _tmp103 * _tmp68 - _tmp103 * _tmp71 - _tmp45 * _tmp62;
  const Scalar _tmp105 = _tmp103 * _tmp74 - _tmp103 * _tmp76 - _tmp45 * _tmp55;
  const Scalar _tmp106 = -_tmp16 * _tmp55 + _tmp29 * _tmp34;
  const Scalar _tmp107 = _tmp13 * _tmp26 - _tmp16 * _tmp62;
  const Scalar _tmp108 = _tmp106 * _tmp60 + _tmp107 * _tmp65;
  const Scalar _tmp109 = _tmp107 * _tmp45 + _tmp108 * _tmp69 - _tmp108 * _tmp72;
  const Scalar _tmp110 = _tmp106 * _tmp45 + _tmp108 * _tmp75 - _tmp108 * _tmp77;
  const Scalar _tmp111 = -_tmp19 * _tmp55 + _tmp32 * _tmp34;
  const Scalar _tmp112 = -_tmp19 * _tmp62 + _tmp26 * _tmp4;
  const Scalar _tmp113 = _tmp111 * _tmp60 + _tmp112 * _tmp65;
  const Scalar _tmp114 = _tmp112 * _tmp45 + _tmp113 * _tmp69 - _tmp113 * _tmp72;
  const Scalar _tmp115 = _tmp111 * _tmp45 + _tmp113 * _tmp75 - _tmp113 * _tmp77;
  const Scalar _tmp116 = -_tmp22 * _tmp62 + _tmp26 * _tmp8;
  const Scalar _tmp117 = -_tmp22 * _tmp55 + _tmp31 * _tmp34;
  const Scalar _tmp118 = _tmp116 * _tmp65 + _tmp117 * _tmp60;
  const Scalar _tmp119 = (Scalar(1) / Scalar(2)) * _tmp118;
  const Scalar _tmp120 = _tmp116 * _tmp45 + _tmp119 * _tmp68 - _tmp119 * _tmp71;
  const Scalar _tmp121 = _tmp117 * _tmp45 - _tmp118 * _tmp77 + _tmp119 * _tmp74;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp46;
    _res(1, 0) = _tmp47;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 9>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp73;
    _jacobian(1, 0) = _tmp78;
    _jacobian(0, 1) = _tmp86;
    _jacobian(1, 1) = _tmp87;
    _jacobian(0, 2) = _tmp93;
    _jacobian(1, 2) = _tmp94;
    _jacobian(0, 3) = _tmp96;
    _jacobian(1, 3) = _tmp99;
    _jacobian(0, 4) = _tmp100;
    _jacobian(1, 4) = _tmp102;
    _jacobian(0, 5) = _tmp104;
    _jacobian(1, 5) = _tmp105;
    _jacobian(0, 6) = _tmp109;
    _jacobian(1, 6) = _tmp110;
    _jacobian(0, 7) = _tmp114;
    _jacobian(1, 7) = _tmp115;
    _jacobian(0, 8) = _tmp120;
    _jacobian(1, 8) = _tmp121;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 9, 9>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp73, Scalar(2)) + std::pow(_tmp78, Scalar(2));
    _hessian(1, 0) = _tmp73 * _tmp86 + _tmp78 * _tmp87;
    _hessian(2, 0) = _tmp73 * _tmp93 + _tmp78 * _tmp94;
    _hessian(3, 0) = _tmp73 * _tmp96 + _tmp78 * _tmp99;
    _hessian(4, 0) = _tmp100 * _tmp73 + _tmp102 * _tmp78;
    _hessian(5, 0) = _tmp104 * _tmp73 + _tmp105 * _tmp78;
    _hessian(6, 0) = _tmp109 * _tmp73 + _tmp110 * _tmp78;
    _hessian(7, 0) = _tmp114 * _tmp73 + _tmp115 * _tmp78;
    _hessian(8, 0) = _tmp120 * _tmp73 + _tmp121 * _tmp78;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp86, Scalar(2)) + std::pow(_tmp87, Scalar(2));
    _hessian(2, 1) = _tmp86 * _tmp93 + _tmp87 * _tmp94;
    _hessian(3, 1) = _tmp86 * _tmp96 + _tmp87 * _tmp99;
    _hessian(4, 1) = _tmp100 * _tmp86 + _tmp102 * _tmp87;
    _hessian(5, 1) = _tmp104 * _tmp86 + _tmp105 * _tmp87;
    _hessian(6, 1) = _tmp109 * _tmp86 + _tmp110 * _tmp87;
    _hessian(7, 1) = _tmp114 * _tmp86 + _tmp115 * _tmp87;
    _hessian(8, 1) = _tmp120 * _tmp86 + _tmp121 * _tmp87;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp93, Scalar(2)) + std::pow(_tmp94, Scalar(2));
    _hessian(3, 2) = _tmp93 * _tmp96 + _tmp94 * _tmp99;
    _hessian(4, 2) = _tmp100 * _tmp93 + _tmp102 * _tmp94;
    _hessian(5, 2) = _tmp104 * _tmp93 + _tmp105 * _tmp94;
    _hessian(6, 2) = _tmp109 * _tmp93 + _tmp110 * _tmp94;
    _hessian(7, 2) = _tmp114 * _tmp93 + _tmp115 * _tmp94;
    _hessian(8, 2) = _tmp120 * _tmp93 + _tmp121 * _tmp94;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp96, Scalar(2)) + std::pow(_tmp99, Scalar(2));
    _hessian(4, 3) = _tmp100 * _tmp96 + _tmp102 * _tmp99;
    _hessian(5, 3) = _tmp104 * _tmp96 + _tmp105 * _tmp99;
    _hessian(6, 3) = _tmp109 * _tmp96 + _tmp110 * _tmp99;
    _hessian(7, 3) = _tmp114 * _tmp96 + _tmp115 * _tmp99;
    _hessian(8, 3) = _tmp120 * _tmp96 + _tmp121 * _tmp99;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp100, Scalar(2)) + std::pow(_tmp102, Scalar(2));
    _hessian(5, 4) = _tmp100 * _tmp104 + _tmp102 * _tmp105;
    _hessian(6, 4) = _tmp100 * _tmp109 + _tmp102 * _tmp110;
    _hessian(7, 4) = _tmp100 * _tmp114 + _tmp102 * _tmp115;
    _hessian(8, 4) = _tmp100 * _tmp120 + _tmp102 * _tmp121;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp104, Scalar(2)) + std::pow(_tmp105, Scalar(2));
    _hessian(6, 5) = _tmp104 * _tmp109 + _tmp105 * _tmp110;
    _hessian(7, 5) = _tmp104 * _tmp114 + _tmp105 * _tmp115;
    _hessian(8, 5) = _tmp104 * _tmp120 + _tmp105 * _tmp121;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp109, Scalar(2)) + std::pow(_tmp110, Scalar(2));
    _hessian(7, 6) = _tmp109 * _tmp114 + _tmp110 * _tmp115;
    _hessian(8, 6) = _tmp109 * _tmp120 + _tmp110 * _tmp121;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp114, Scalar(2)) + std::pow(_tmp115, Scalar(2));
    _hessian(8, 7) = _tmp114 * _tmp120 + _tmp115 * _tmp121;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp120, Scalar(2)) + std::pow(_tmp121, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 9, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp46 * _tmp73 + _tmp47 * _tmp78;
    _rhs(1, 0) = _tmp46 * _tmp86 + _tmp47 * _tmp87;
    _rhs(2, 0) = _tmp46 * _tmp93 + _tmp47 * _tmp94;
    _rhs(3, 0) = _tmp46 * _tmp96 + _tmp47 * _tmp99;
    _rhs(4, 0) = _tmp100 * _tmp46 + _tmp102 * _tmp47;
    _rhs(5, 0) = _tmp104 * _tmp46 + _tmp105 * _tmp47;
    _rhs(6, 0) = _tmp109 * _tmp46 + _tmp110 * _tmp47;
    _rhs(7, 0) = _tmp114 * _tmp46 + _tmp115 * _tmp47;
    _rhs(8, 0) = _tmp120 * _tmp46 + _tmp121 * _tmp47;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace bretl_projection
